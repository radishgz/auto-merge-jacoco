###############################################################################
#ASM: a very small and fast Java bytecode manipulation framework
#Copyright (c) 2000-2011 INRIA, France Telecom
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions
#are met:
#1. Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#2. Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#3. Neither the name of the copyright holders nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# class mappings

org/jacoco/agent/rt/internal/asmFrame/remove=true

# field mappings

org/jacoco/agent/rt/internal/asmClassWriter.typeCount=-
org/jacoco/agent/rt/internal/asmClassWriter.typeTable=-

org/jacoco/agent/rt/internal/asmLabel.frame=-

org/jacoco/agent/rt/internal/asmMethodWriter.frameCount=-
org/jacoco/agent/rt/internal/asmMethodWriter.stackMap=-
org/jacoco/agent/rt/internal/asmMethodWriter.previousFrameOffset=-
org/jacoco/agent/rt/internal/asmMethodWriter.previousFrame=-
org/jacoco/agent/rt/internal/asmMethodWriter.frameIndex=-
org/jacoco/agent/rt/internal/asmMethodWriter.frame=-

# method mappings

org/jacoco/agent/rt/internal/asmClassReader.readFrameType([Ljava/lang/Object;II[C[Lorg/jacoco/agent/rt/internal/asmLabel;)I=-

org/jacoco/agent/rt/internal/asmClassWriter.addType(Ljava/lang/String;)I=-
org/jacoco/agent/rt/internal/asmClassWriter.addUninitializedType(Ljava/lang/String;I)I=-
org/jacoco/agent/rt/internal/asmClassWriter.addType(Lorg/jacoco/agent/rt/internal/asmItem;)Lorg/jacoco/agent/rt/internal/asmItem;=-
org/jacoco/agent/rt/internal/asmClassWriter.getMergedType(II)I=-

org/jacoco/agent/rt/internal/asmMethodWriter.startFrame(III)V=-
org/jacoco/agent/rt/internal/asmMethodWriter.endFrame()V=-
org/jacoco/agent/rt/internal/asmMethodWriter.writeFrame()V=-
org/jacoco/agent/rt/internal/asmMethodWriter.writeFrameTypes(II)V=-
org/jacoco/agent/rt/internal/asmMethodWriter.writeFrameType(Ljava/lang/Object;)V=-
